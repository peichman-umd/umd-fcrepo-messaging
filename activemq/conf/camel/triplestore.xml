<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

  <bean id="getDescriptionURI" class="edu.umd.lib.camel.processors.DescriptionURI"/>

  <routeContext xmlns="http://camel.apache.org/schema/spring" id="Triplestore">
    <!--
    Expected headers:
    * CamelFcrepoEventName
    Expected body format:
    * (None)
    -->
    <route id="edu.umd.lib.camel.routes.queue.index.triplestore">
      <description>Distributes this message based on the type of event it represents.</description>
      <from uri="activemq:index.triplestore"/>
      <choice>
        <when>
          <simple>${header.CamelFcrepoEventName} starts with "create"</simple>
          <to uri="direct:triplestore.Create"/>
        </when>
        <when>
          <simple>${header.CamelFcrepoEventName} starts with "import"</simple>
          <to uri="direct:triplestore.Create"/>
        </when>
        <when>
          <simple>${header.CamelFcrepoEventName} starts with "update"</simple>
          <to uri="direct:triplestore.Update"/>
        </when>
        <when>
          <simple>${header.CamelFcrepoEventName} starts with "delete"</simple>
          <to uri="direct:triplestore.Delete"/>
        </when>
      </choice>
    </route>

    <!--
    Expected headers:
    * CamelFcrepoUser
    * CamelFcrepoPath
    Expected body format:
    * (None)
    Expected environment variables:
    * REPO_INTERNAL_URL
    Expected beans:
    * repoExternalURL
    -->
    <route id="edu.umd.lib.camel.routes.triplestore.GetRDF">
      <description>Retrieve the N-Triples representation of the resource with
        the URI given in the `CamelFcrepoUri` header.</description>
      <from uri="direct:triplestore.GetRDF"/>
      <!-- generate a Bearer auth token for the Authorization header -->
      <process ref="addBearerAuthorization">
        <description>add an Authorization header
          containing a Bearer token</description>
      </process>
      <!-- check whether this is a binary or not -->
      <setHeader headerName="CamelHttpUri">
        <simple>${sysenv.REPO_INTERNAL_URL}${header.CamelFcrepoPath}</simple>
      </setHeader>
      <setHeader headerName="CamelHttpMethod">
        <constant>HEAD</constant>
      </setHeader>
      <!-- send the HEAD request to fcrepo -->
      <log loggingLevel="DEBUG" message="HEAD ${header.CamelHttpUri}"/>
      <to uri="http4:fcrepo"/>
      <!-- parse the Link headers to check for rel="describedby" -->
      <process ref="getDescriptionURI"/>
      <filter>
        <header>DescribedBy</header>
        <setHeader headerName="CamelHttpUri">
          <header>DescribedBy</header>
        </setHeader>
      </filter>
      <!-- get the current RDF representation of the resource as N-Triples -->
      <setHeader headerName="CamelHttpMethod">
        <constant>GET</constant>
      </setHeader>
      <setHeader headerName="Accept">
        <constant>application/n-triples</constant>
      </setHeader>
      <setHeader headerName="X-Forwarded-Host">
        <simple>${bean:repoExternalURL.authority}</simple>
      </setHeader>
      <setHeader headerName="X-Forwarded-Proto">
        <simple>${bean:repoExternalURL.protocol}</simple>
      </setHeader>
      <log loggingLevel="DEBUG" message="GET ${header.CamelHttpUri}"/>
      <to uri="http4:fcrepo"/>
    </route>

    <!--
    Expected headers:
    * CamelFcrepoUser
    * CamelFcrepoPath
    Expected body format:
    * N-Triples
    -->
    <route id="edu.umd.lib.camel.routes.triplestore.Create">
      <description>Generate an `INSERT DATA` SPARQL Update query wrapper
        around the body of this message. The incoming body must be in
        N-Triples format. The message is then forwarded to the
        `triplestore.Submit` route.</description>

      <from uri="direct:triplestore.Create"/>
      <to uri="direct:triplestore.GetRDF"/>
      <setBody>
        <simple>INSERT DATA {\n${body}}</simple>
      </setBody>
      <to uri="direct:triplestore.Submit"/>
    </route>

    <!--
    Expected headers:
    * CamelFcrepoUri
    Expected body format:
    * N-Triples
    -->
    <route id="edu.umd.lib.camel.routes.triplestore.Update">
      <description>Generate a `DELETE {...} INSERT {...}` SPARQL Update
        query. The `DELETE` clause will remove all triples with a subject
        URI equal to the `CamelFcrepoUri` header. The `INSERT` clause
        wraps the body of this message. The incoming body must be in
        N-Triples format. The message is then forwarded to the
        `triplestore.Submit` route.</description>

      <from uri="direct:triplestore.Update"/>
      <to uri="direct:triplestore.GetRDF"/>
      <!-- replace current triples in triplestore -->
      <setBody>
        <simple><![CDATA[
DELETE { <${header.CamelFcrepoUri}> ?p ?o }
INSERT {\n${body}}
WHERE {}]]></simple>
      </setBody>
      <to uri="direct:triplestore.Submit"/>
    </route>

    <!--
    Expected headers:
    * CamelFcrepoUri
    Expected body format:
    * N-Triples
    -->
    <route id="edu.umd.lib.camel.routes.triplestore.Delete">
      <description>Generate a `DELETE {...} INSERT {...} WHERE {...}`
        SPARQL Update query. The `DELETE` clause will remove all
        triples with a subject URI equal to the `CamelFcrepoUri`
        header. The `INSERT` clause does nothing. The `WHERE` clause
        simply limits the update to the set of triples that have
        a subject URI equal to the `CamelFcrepoUri` header. The
        message is then forwarded to the `triplestore.Submit`
        route.</description>
      <from uri="direct:triplestore.Delete"/>
      <setBody>
        <simple><![CDATA[
DELETE { <${header.CamelFcrepoUri}> ?p ?o }
INSERT {}
WHERE  { <${header.CamelFcrepoUri}> ?p ?o }
        ]]></simple>
      </setBody>
      <to uri="direct:triplestore.Submit"/>
    </route>

    <!--
    Expected headers:
    * (None)
    Expected body format:
    * N-Triples
    Expected environment variables:
    * INDEX_TRIPLESTORE_UPDATE_URI
    -->
    <route id="edu.umd.lib.camel.routes.triplestore.Submit">
      <description>Submit the message body (assumed to be in
        `application/sparql-update` format) via HTTP POST to
        the URI from given by the environment variable
        `INDEX_TRIPLESTORE_UPDATE_URI`</description>

      <from uri="direct:triplestore.Submit"/>
      <removeHeaders pattern="*"/>
      <setHeader headerName="CamelHttpUri">
        <simple>${sysenv.INDEX_TRIPLESTORE_UPDATE_URI}</simple>
      </setHeader>
      <setHeader headerName="CamelHttpMethod">
        <constant>POST</constant>
      </setHeader>
      <setHeader headerName="Content-Type">
        <constant>application/sparql-update</constant>
      </setHeader>
      <log loggingLevel="DEBUG" message="SPARQL Update Query: ${body}"/>
      <to uri="http4:triplestore"/>
    </route>
  </routeContext>
</beans>
